import { gtr as versionGreaterThan, coerce } from 'semver';
import { cliError, cliWarn } from '../../cli';
import { getPackageVersion } from '../packageManagerUtils';
import { stripFuncExtension } from '../../utils';
import type { CollectedFunctions, FunctionInfo } from './configs';
import { join, resolve } from 'path';

/**
 * Checks if there are any invalid functions from the Vercel build output.
 *
 * If there are any invalid functions it will try to see if they are amendable and if the
 * build output can still be used.
 *
 * If however the build output can't be used, an error message will be printed and the process will exit.
 *
 * @param collectedFunctions Collected functions from the Vercel build output.
 */
export async function checkInvalidFunctions(
	collectedFunctions: CollectedFunctions,
): Promise<void> {
	await tryToFixNotFoundRoute(collectedFunctions);

	if (collectedFunctions.invalidFunctions.size > 0) {
		await printInvalidFunctionsErrorMessage(
			collectedFunctions.invalidFunctions,
		);
		process.exit(1);
	}
}

/**
 * Tries to fix potential not-found invalid functions from the Vercel build output.
 *
 * Static app/not-found.(jsx|tsx) pages generate an _not-found.func serverless function,
 * that can be removed as we can fallback to the statically generated 404 page
 *
 * If the app/not-found.(jsx|tsx) contains runtime logic alongside the _not-found.func serverless
 * function also an _error.func will be generated, in such a case we can only warn the user about
 * it.
 * (
 *  That's the only option because:
 *    - removing the _not-found.func and _error.func doesn't result in a working application
 *    - we don't have a guarantee that the _error.func hasn't been generated by something else
 *      and that the _not-found.func is that of a static app/not-found route
 * )
 *
 * @param collectedFunctions Collected functions from the Vercel build output.
 */
async function tryToFixNotFoundRoute(
	collectedFunctions: CollectedFunctions,
): Promise<void> {
	const functionsDir = resolve('.vercel', 'output', 'functions');
	const notFoundDir = join(functionsDir, '_not-found.func');
	const errorDir = join(functionsDir, '_error.func');

	const invalidNotFound = collectedFunctions.invalidFunctions.get(notFoundDir);
	const invalidError = collectedFunctions.invalidFunctions.get(errorDir);

	if (invalidNotFound && !invalidError) {
		collectedFunctions.invalidFunctions.delete(notFoundDir);
		const notFoundRscDir = join(functionsDir, '_not-found.rsc.func');
		collectedFunctions.invalidFunctions.delete(notFoundRscDir);
	}

	if (invalidNotFound && invalidError) {
		cliWarn(`
			Warning: your app/not-found route might contain runtime logic, this is currently
			not supported by @cloudflare/next-on-pages, if that's actually the case please
			remove the runtime logic from your not-found route
		`);
	}
}

/**
 * Prints an error message for the invalid functions from the Vercel build output.
 *
 * @param invalidFunctions Invalid functions found in the Vercel build output.
 */
async function printInvalidFunctionsErrorMessage(
	invalidFunctions: Map<string, FunctionInfo>,
): Promise<void> {
	const nextVersion = coerce(await getPackageVersion('next'));

	const { exportText, exampleCode } =
		!nextVersion || versionGreaterThan(nextVersion, '13.1.2')
			? {
					exportText: 'the following edge runtime route segment config',
					exampleCode: "export const runtime = 'edge';",
			  }
			: {
					exportText: 'a config object specifying the edge runtime, like',
					exampleCode: "export const config = { runtime: 'edge' };",
			  };

	const invalidRoutes = [
		...new Set(
			[...invalidFunctions.values()].map(fn =>
				stripFuncExtension(fn.relativePath).replace(/\.rsc$/, ''),
			),
		),
	];

	cliError(
		`
		ERROR: Failed to produce a Cloudflare Pages build from the project.

			The following routes were not configured to run with the Edge Runtime:\n${invalidRoutes
				.map(route => `			  - ${route}`)
				.join('\n')}

			Please make sure that all your non-static routes export ${exportText}:
			  ${exampleCode}

			You can read more about the Edge Runtime on the Next.js documentation:
			  https://nextjs.org/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes
	`,
		{ spaced: true },
	);
}
